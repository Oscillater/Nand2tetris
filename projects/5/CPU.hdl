// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/5/CPU.hdl
/**
 * The Hack Central Processing unit (CPU).
 * Parses the binary code in the instruction input and executes it according to the
 * Hack machine language specification. In the case of a C-instruction, computes the
 * function specified by the instruction. If the instruction specifies to read a memory
 * value, the inM input is expected to contain this value. If the instruction specifies
 * to write a value to the memory, sets the outM output to this value, sets the addressM
 * output to the target address, and asserts the writeM output (when writeM = 0, any
 * value may appear in outM).
 * If the reset input is 0, computes the address of the next instruction and sets the
 * pc output to that value. If the reset input is 1, sets pc to 0.
 * Note: The outM and writeM outputs are combinational: they are affected by the
 * instruction's execution during the current cycle. The addressM and pc outputs are
 * clocked: although they are affected by the instruction's execution, they commit to
 * their new values only in the next cycle.
 */
CHIP CPU {

    IN  inM[16],         // M value input  (M = contents of RAM[A])
        instruction[16], // Instruction for execution
        reset;           // Signals whether to re-start the current
                         // program (reset==1) or continue executing
                         // the current program (reset==0).

    OUT outM[16],        // M value output
        writeM,          // Write to M? 
        addressM[15],    // Address in data memory (of M)
        pc[15];          // address of next instruction

    PARTS:
    Mux16(a=instruction,b=aluoutput,sel=instruction[15],out=registera);
    Not(in=instruction[15],out=nota);
    And(a=instruction[15],b=instruction[5],out=load1);
    Or(a=load1,b=nota,out=load2);
    ARegister(in=registera,load=load2,out=outa,out[0..14]=addressM,out=inpc);//A Register
    Mux16(a=outa,b=inM,sel=instruction[12],out=muxoutam);
    And(a=instruction[15],b=instruction[4],out=load3);
    DRegister(in=aluoutput,load=load3,out=outd);//D Register
    ALU(x=outd,y=muxoutam ,zx=instruction[11] ,nx=instruction[10] ,zy=instruction[9] ,ny=instruction[8] ,f=instruction[7] ,no=instruction[6] ,out=aluoutput,zr=iszero ,ng=isneg );
    Mux16(a[0..15]=false,b=aluoutput,sel=msel,out=outM);
    And(a=instruction[15],b=instruction[3],out=writeM,out=msel);
    Not(in=iszero,out=notzero);
    Not(in=isneg,out=notneg);
    And(a=notzero,b=notneg,out=ispos);
    And(a=isneg,b=instruction[2],out=outneg);
    And(a=iszero,b=instruction[1],out=outzero);
    And(a=ispos,b=instruction[0],out=outpos);
    Or(a=outneg,b=outzero,out=out1);
    Or(a=out1,b=outpos,out=out2);
    And(a=out2,b=instruction[15],out=out3);
    PC(in=inpc ,load=out3 ,inc=true,reset=reset ,out[0..14]=pc ); 
	//// Replace this comment with your code.
}
